
This text has been written to explain some things concering the source code
of the Legend of Saladir roguelike game.

First things first. As you browse the source code, you will see that it's
not very cleanly commented. There're comments in few places only. This is
due my bad programming style. It's a good thing to comment your source, I've
not done that very nicely. That's why I often have to take some moments to
think what certain parts of the code actually does, how does it relate to
the other parts of the project and so on. It slows down the actual
developing process.

Secondly, the project is built up very stupidly. If you make changes to one
header file, the changes are that the whole project should (and will) be
built at once when compiling it. There's been very hard times when
developing the data structures of the game, ie. creature.h defines some
structures specific to races and monsters, defines.h defines some general
data structures and structures needed to store player and monster
information in the memory. When you start looking the code and header files,
you will notice that some major cleanup should be done there. Ie. there's a
separate module which handles monster and player inventories, still the
inventory data structures are defined in header defines.h. 

Another thing which is very stupid. The game utilises linked lists in
several part of the engine. Now the stupid part, every module which needs a
linked list, has it's own routines for a linked list handling. This requires
more work when developing the game, it also creates bigger code since
there're pretty much similar pieces of code lying around the executable.
But this really was intentional, I wanted it this way. Since I thought that
a general list-module would've slowed down the engine, and now every list
code has been specialised for the data type needed in the module. (Ie,
inventory-module knows nothing about monsters, just about inventory nodes).
There're good and bad points in this, but it's nothing too serious.

What about the actual source?

The modules dungeon.cc and generate.cc were the first ones built for the
project. And these two modules actually were the first working version of
the game. So it's pretty much so that the code in these modules is NOT very
clean nor fast. Of course there've been a lot of changes during the
developing process but the core is still the same. One of my principles is
"Why change code which is working?". 

About speed?

*the game is slow as hell*. It's ok on fast computers, ie. 486/100 should be
enough for playing. Atleast it was enough for version 0.30. I fear that when
someone ports the game for Amiga, it will require QUITE AN AMIGA before the
game is playable.

Why is the game so slow? Well, I use linked lists a lot. Let me explain,

First of all, a level is just an 2 dimensional array of cave-blocks. There's
nothing special with that. The level contains several lists:


	1. level has a list of monsters
	     every monster has
		1.1 list of items, inventory
		1.2 list of skills
		1.3 list of status codes
	   level contains a list of items in the level.

	2. player data type contains a lot of lists:
		2.1 list of items, inventory
		2.2 list of skills
		2.3 list of status codes
		2.4 list of quests

 So, one reason for the slowness is the usage of lists. Some roguelikes has
been developed so that one location of a level can contain only ONE item. In
my game, a location can contain as many items as there's memory for item
storage. Level items are stored in a linked list, every item has a
coordinate pair which tells the location of the item in the level. Now, the
slow part, in the vision code (Line of sight) this list must be scanned
through to check all visible items. The monsters are stored in a linked list
a bit similar to the item list, they also have a coordinate pair telling the
location of every monster. The vision code must scan this list too to check
which monsters are visible to the player.

